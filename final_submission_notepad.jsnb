{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "await scrib.loadScript(\"https://cdn.jsdelivr.net/npm/@tensorflow-models/handpose\");\nawait scrib.loadScript(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core\");\nawait scrib.loadScript(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-converter\");\nawait scrib.loadScript(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-webgl\");\nwindow.moduleName = await import(\"https://cdn.jsdelivr.net/npm/@tensorflow-models/handpose\");\n",
      "status": "[13]<br><span style=\"font-size:8px\">40ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "//>html\n<style>\n        /* Consolidated Styles */\n        body {\n            height: 100%;\n            margin: 0;\n            font-family: 'Arial', sans-serif;\n            background-color: #E2EAF4;\n            color: white;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 18px;\n            flex-direction: row;\n            gap: 30px;\n        }\n\n        .game-container {\n            display: flex;\n            height: 150vh;\n\t\t  \tbackground-color:#282c34;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            gap: 15px;\n            position: relative;\n        }\n\n        .score-board {\n            font-size: 24px;\n            font-weight: bold;\n            margin-bottom: 10px;\n            color: #4CAF50;\n        }\n\n        canvas {\n            border: 3px solid #4CAF50;\n            border-radius: 8px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);\n        }\n\n        .controls {\n            color: white;\n            text-align: center;\n            margin-top: 10px;\n        }\n\n        #startGesture,\n        #startVoice {\n            padding: 12px 30px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 16px;\n            transition: all 0.3s ease;\n        }\n\n        #startGesture:hover,\n        #startVoice:hover {\n            background-color: #45a049;\n        }\n\n        #gestureStatus,\n        #voiceStatus {\n            margin-top: 10px;\n            padding: 10px;\n            border-radius: 5px;\n            background-color: #4CAF50;\n            text-align: center;\n            font-size: 18px;\n            width: 250px;\n            transition: all 0.3s ease;\n        }\n\n        .webcam-container {\n\t\t  //background-color:red;\n\t\t  width:320px;\n            position: relative;\n            margin-top: 20px;\n        }\n\n        #webcam {\n            width: 320px;\n            height: 240px;\n            border-radius: 8px;\n            transform: scaleX(-1);\n        }\n\n        #gesture-canvas {\n            position: absolute;\n            left: 0;\n            top: 0;\n            width: 320px;\n            height: 240px;\n            transform: scaleX(-1);\n        }\n\n        .game-over {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            text-align: center;\n            color: white;\n            font-size: 28px;\n            font-weight: bold;\n            padding: 20px;\n            background: rgba(0, 0, 0, 0.7);\n            border-radius: 10px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.6);\n        }\n.controls p{\n  color:white;\n}\n\n        .game-over button {\n            margin-top: 15px;\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            border: none;\n            border-radius: 8px;\n            color: white;\n            cursor: pointer;\n        }\n\t\t.cam_box{\n\t\t  width:800px;\n\t\t  //background-color:green;\n\t\t  justify-content:space-between;\n\t\t  display:flex;\n\t\t}\n\t\t.controlsforgame{\n\t\t  width:600px;\n\t\t  color:white;\n\t\t  //background-color:red;\n\t\t  display:flex;\n\t\t  justify-content:space-between;\n\t\t}\n\n        .game-over button:hover {\n            background-color: #45a049;\n        }\n    </style>",
      "status": "[14]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "\n<style>\n        /* Consolidated Styles */\n        body {\n            height: 100%;\n            margin: 0;\n            font-family: 'Arial', sans-serif;\n            background-color: #E2EAF4;\n            color: white;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 18px;\n            flex-direction: row;\n            gap: 30px;\n        }\n\n        .game-container {\n            display: flex;\n            height: 150vh;\n\t\t  \tbackground-color:#282c34;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            gap: 15px;\n            position: relative;\n        }\n\n        .score-board {\n            font-size: 24px;\n            font-weight: bold;\n            margin-bottom: 10px;\n            color: #4CAF50;\n        }\n\n        canvas {\n            border: 3px solid #4CAF50;\n            border-radius: 8px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);\n        }\n\n        .controls {\n            color: white;\n            text-align: center;\n            margin-top: 10px;\n        }\n\n        #startGesture,\n        #startVoice {\n            padding: 12px 30px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 16px;\n            transition: all 0.3s ease;\n        }\n\n        #startGesture:hover,\n        #startVoice:hover {\n            background-color: #45a049;\n        }\n\n        #gestureStatus,\n        #voiceStatus {\n            margin-top: 10px;\n            padding: 10px;\n            border-radius: 5px;\n            background-color: #4CAF50;\n            text-align: center;\n            font-size: 18px;\n            width: 250px;\n            transition: all 0.3s ease;\n        }\n\n        .webcam-container {\n\t\t  //background-color:red;\n\t\t  width:320px;\n            position: relative;\n            margin-top: 20px;\n        }\n\n        #webcam {\n            width: 320px;\n            height: 240px;\n            border-radius: 8px;\n            transform: scaleX(-1);\n        }\n\n        #gesture-canvas {\n            position: absolute;\n            left: 0;\n            top: 0;\n            width: 320px;\n            height: 240px;\n            transform: scaleX(-1);\n        }\n\n        .game-over {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            text-align: center;\n            color: white;\n            font-size: 28px;\n            font-weight: bold;\n            padding: 20px;\n            background: rgba(0, 0, 0, 0.7);\n            border-radius: 10px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.6);\n        }\n.controls p{\n  color:white;\n}\n\n        .game-over button {\n            margin-top: 15px;\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            border: none;\n            border-radius: 8px;\n            color: white;\n            cursor: pointer;\n        }\n\t\t.cam_box{\n\t\t  width:800px;\n\t\t  //background-color:green;\n\t\t  justify-content:space-between;\n\t\t  display:flex;\n\t\t}\n\t\t.controlsforgame{\n\t\t  width:600px;\n\t\t  color:white;\n\t\t  //background-color:red;\n\t\t  display:flex;\n\t\t  justify-content:space-between;\n\t\t}\n\n        .game-over button:hover {\n            background-color: #45a049;\n        }\n    </style> <br>",
      "type": "code"
    },
    {
      "code": "//>html\n<div class=\"game-container\">\n        <h1 style=\"color:white;\">Snake Game with Voice & Gesture Controls!</h1>\n        <div class=\"score-board\" id=\"score\">Score: 0</div>\n        <div class=\"cam_box\">\n\t\t  <canvas width=\"400\" height=\"400\" id=\"game\"></canvas>\n\t\t  <div class=\"webcam-container\">\n        <video id=\"webcam\" playsinline></video>\n        <canvas id=\"gesture-canvas\"></canvas>\n    </div>\n\t\t  </div>\n        <div class=\"controls\" style=\"color:white;font-size:larger;\">\n           <p> Use arrow keys, gesture control, or voice control (\"up\", \"down\", \"left\", \"right\").</p>\n\t\t\t<p>You can play with keyboard keys also</p>\n\t\t\t<p>Kindly wait for a few seconds till the gesture control is active</p>\n\t\t\t<p>For hand gesture: keep your palm facing the ground and four fingers pointing to the camera.</p>\n\t\t\t<p>Now move your fingers right,left,up,down for the snake to move</p>\n        </div>\n        <div class=\"controlsforgame\">\n\t\t  <button id=\"startGesture\">Enable Gesture Controls</button>\n          <button id=\"startVoice\">Enable Voice Controls</button>\n\t\t</div>\n        <div class=\"controlsforgame\">\n\t\t  <div id=\"gestureStatus\" style=\"backgroud-color:#060270\">Gesture controls are off</div>\n          <div id=\"voiceStatus\" style=\"backgroud-color:#060270\">Voice controls are off</div>\n\t\t</div>\n        <div id=\"lastCommand\" style=\"color:white;font-size:large;\"></div>\n    \n    \n</div>",
      "status": "[15]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "\n<div class=\"game-container\">\n        <h1 style=\"color:white;\">Snake Game with Voice &amp; Gesture Controls!</h1>\n        <div class=\"score-board\" id=\"score\">Score: 0</div>\n        <div class=\"cam_box\">\n\t\t  <canvas width=\"400\" height=\"400\" id=\"game\"></canvas>\n\t\t  <div class=\"webcam-container\">\n        <video id=\"webcam\" playsinline=\"\"></video>\n        <canvas id=\"gesture-canvas\"></canvas>\n    </div>\n\t\t  </div>\n        <div class=\"controls\" style=\"color:white;font-size:larger;\">\n           <p> Use arrow keys, gesture control, or voice control (\"up\", \"down\", \"left\", \"right\").</p>\n\t\t\t<p>You can play with keyboard keys also</p>\n\t\t\t<p>Kindly wait for a few seconds till the gesture control is active</p>\n\t\t\t<p>For hand gesture: keep your palm facing the ground and four fingers pointing to the camera.</p>\n\t\t\t<p>Now move your fingers right,left,up,down for the snake to move</p>\n        </div>\n        <div class=\"controlsforgame\">\n\t\t  <button id=\"startGesture\">Enable Gesture Controls</button>\n          <button id=\"startVoice\">Enable Voice Controls</button>\n\t\t</div>\n        <div class=\"controlsforgame\">\n\t\t  <div id=\"gestureStatus\" style=\"backgroud-color:#060270\">Gesture controls are off</div>\n          <div id=\"voiceStatus\" style=\"backgroud-color:#060270\">Voice controls are off</div>\n\t\t</div>\n        <div id=\"lastCommand\" style=\"color:white;font-size:large;\"></div>\n    \n    \n</div> <br>",
      "type": "code"
    },
    {
      "code": "\n\n        const canvas = document.getElementById('game');\n        const context = canvas.getContext('2d');\n\t\tconst gamecontainer=document.querySelector(\".game-container\");\n        const grid = 16;\n        let count = 0, score = 0, gameRunning = true;\n        let snake = {\n            x: 160,\n            y: 160,\n            dx: grid,\n            dy: 0,\n            cells: [],\n            maxCells: 4,\n            color: '#FFFFFF'\n        };\n        let apple = {\n            x: 320,\n            y: 320,\n            color: '#FF0000'\n        };\n\n        // Gesture Variables\n        let gestureControlsActive = false, model = null, video, gestureCanvas, gestureCtx;\n        let lastFingerPosition = null;\n        const movementThreshold = 20;\n\n        // Voice Variables\n        let voiceControlsActive = false, recognition, commandCooldown = false;\n\n        /* ----------- Game Functions ----------- */\n        function resetGame() {\n            snake.x = 160;\n            snake.y = 160;\n            snake.dx = grid;\n            snake.dy = 0;\n            snake.cells = [];\n            snake.maxCells = 4;\n            snake.color = getRandomColor();\n            score = 0;\n            count = 0;\n            updateScore();\n            repositionApple();\n            gameRunning = true;\n        }\n\n        function repositionApple() {\n            apple.x = getRandomInt(0, 25) * grid;\n            apple.y = getRandomInt(0, 25) * grid;\n            apple.color = getRandomColor();\n        }\n\n        function updateScore() {\n            document.getElementById('score').textContent = 'Score: ' + score;\n        }\n\n        function loop() {\n            requestAnimationFrame(loop);\n            if (!gameRunning) return;\n\n            if (++count < 10) return;\n\n            count = 0;\n            context.clearRect(0, 0, canvas.width, canvas.height);\n\n            snake.x += snake.dx;\n            snake.y += snake.dy;\n\n            if (snake.x < 0) snake.x = canvas.width - grid;\n            else if (snake.x >= canvas.width) snake.x = 0;\n            if (snake.y < 0) snake.y = canvas.height - grid;\n            else if (snake.y >= canvas.height) snake.y = 0;\n\n            snake.cells.unshift({ x: snake.x, y: snake.y });\n            if (snake.cells.length > snake.maxCells) snake.cells.pop();\n\n            context.fillStyle = apple.color;\n            context.beginPath();\n            context.arc(apple.x + grid / 2, apple.y + grid / 2, grid / 2 - 1, 0, Math.PI * 2);\n            context.fill();\n\n            context.fillStyle = snake.color;\n            snake.cells.forEach(function (cell, index) {\n                context.fillRect(cell.x, cell.y, grid - 1, grid - 1);\n\n                if (cell.x === apple.x && cell.y === apple.y) {\n                    snake.maxCells++;\n                    score += 10;\n                    updateScore();\n                    repositionApple();\n                    snake.color = getRandomColor();\n                }\n\n                for (let i = index + 1; i < snake.cells.length; i++) {\n    if (cell.x === snake.cells[i].x && cell.y === snake.cells[i].y) {\n        gameRunning = false;\n        const gameOverDiv = document.createElement('div');\n        gameOverDiv.className = 'game-over';\n        gameOverDiv.innerHTML = `Game Over! <br> Score: ${score} <br><button onclick=\"restartGame()\">Restart</button>`;\n        \n        // Append gameOverDiv to gamecontainer instead of body\n        gamecontainer.appendChild(gameOverDiv);\n    }\n}\n\n            });\n        }\n\n        function restartGame() {\n            const gameOverDiv = document.querySelector('.game-over');\n            if (gameOverDiv) gameOverDiv.remove();\n            resetGame();\n        }\n\n        function getRandomInt(min, max) {\n            return Math.floor(Math.random() * (max - min)) + min;\n        }\n\n        function getRandomColor() {\n            const letters = '0123456789ABCDEF';\n            let color = '#';\n            for (let i = 0; i < 6; i++) {\n                color += letters[Math.floor(Math.random() * 16)];\n            }\n            return color;\n        }\n        /* ----------- Gesture Control Functions ----------- */\n        async function initializeGestureControls() {\n            const gestureStatus = document.getElementById('gestureStatus');\n            const startButton = document.getElementById('startGesture');\n\n            try {\n                gestureStatus.textContent = 'Loading handpose model...';\n                model = await handpose.load();\n\n                video = document.getElementById('webcam');\n                gestureCanvas = document.getElementById('gesture-canvas');\n                gestureCtx = gestureCanvas.getContext('2d');\n\n                video.width = gestureCanvas.width = 320;\n                video.height = gestureCanvas.height = 240;\n\n                const stream = await navigator.mediaDevices.getUserMedia({\n                    video: { width: 320, height: 240 }\n                });\n                video.srcObject = stream;\n\n                await new Promise((resolve) => {\n                    video.onloadedmetadata = () => {\n                        video.play();\n                        resolve();\n                    };\n                });\n\n                gestureStatus.textContent = 'Gesture controls active!';\n                gestureStatus.style.backgroundColor = '#4CAF50';\n                startButton.style.display = 'none';\n\n                gestureControlsActive = true;\n                detectGestures();\n            } catch (error) {\n                console.error('Error initializing gesture controls:', error);\n                gestureStatus.textContent = 'Failed to initialize: ' + error.message;\n                gestureStatus.style.backgroundColor = '#ff4444';\n            }\n        }\n\n        async function detectGestures() {\n            if (!gestureControlsActive) return;\n\n            try {\n                const predictions = await model.estimateHands(video);\n                gestureCtx.clearRect(0, 0, gestureCanvas.width, gestureCanvas.height);\n\n                if (predictions.length > 0) {\n                    const hand = predictions[0];\n                    const indexFinger = hand.landmarks[8]; // Index fingertip\n\n                    gestureCtx.beginPath();\n                    gestureCtx.arc(indexFinger[0], indexFinger[1], 5, 0, 2 * Math.PI);\n                    gestureCtx.fillStyle = '#FF0000';\n                    gestureCtx.fill();\n\n                    if (lastFingerPosition) {\n                        trackFingerMovement(lastFingerPosition, { x: indexFinger[0], y: indexFinger[1] });\n                    }\n\n                    lastFingerPosition = { x: indexFinger[0], y: indexFinger[1] };\n                }\n            } catch (error) {\n                console.error('Error detecting gestures:', error);\n            }\n\n            requestAnimationFrame(detectGestures);\n        }\n\n        function trackFingerMovement(start, end) {\n            const dx = end.x - start.x;\n            const dy = end.y - start.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            // Ensure the movement is significant enough to change direction\n            if (distance > movementThreshold) {\n                if (Math.abs(dx) > Math.abs(dy)) {\n                    // Horizontal movement\n                    if (dx > 0 && snake.dx !== -grid) { // Only move right if the snake is not already moving left\n                        snake.dx = grid;\n                        snake.dy = 0; // Move right\n                    } else if (dx < 0 && snake.dx !== grid) { // Only move left if the snake is not already moving right\n                        snake.dx = -grid;\n                        snake.dy = 0; // Move left\n                    }\n                } else {\n                    // Vertical movement\n                    if (dy > 0 && snake.dy !== -grid) { // Only move down if the snake is not already moving up\n                        snake.dy = grid;\n                        snake.dx = 0; // Move down\n                    } else if (dy < 0 && snake.dy !== grid) { // Only move up if the snake is not already moving down\n                        snake.dy = -grid;\n                        snake.dx = 0; // Move up\n                    }\n                }\n            }\n        }\n\n        /* ----------- Voice Control Functions ----------- */\n        function initializeVoiceControls() {\n            if (voiceControlsActive) return;\n            try {\n                recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n                recognition.continuous = true;\n                recognition.lang = 'en-US';\n                recognition.onresult = function (event) {\n                    const command = event.results[event.resultIndex][0].transcript.trim().toLowerCase();\n                    processVoiceCommand(command);\n                };\n                recognition.start();\n                voiceControlsActive = true;\n                document.getElementById('voiceStatus').textContent = 'Voice controls active';\n            } catch (error) {\n                console.error('Voice initialization error:', error);\n            }\n        }\n\n        function processVoiceCommand(text) {\n            if (!gameRunning || commandCooldown) return;\n\n            const directions = {\n                'up': () => { if (snake.dy === 0) { snake.dy = -grid; snake.dx = 0; } },\n                'down': () => { if (snake.dy === 0) { snake.dy = grid; snake.dx = 0; } },\n                'left': () => { if (snake.dx === 0) { snake.dx = -grid; snake.dy = 0; } },\n                'right': () => { if (snake.dx === 0) { snake.dx = grid; snake.dy = 0; } }\n            };\n\n            Object.keys(directions).forEach(dir => {\n                if (text.includes(dir)) {\n                    directions[dir]();\n                    document.getElementById('lastCommand').textContent = 'Last command: ' + dir;\n                    commandCooldown = true;\n                    setTimeout(() => commandCooldown = false, 500);\n                }\n            });\n        }\n\n        /* ----------- Event Listeners ----------- */\n        document.getElementById('startGesture').addEventListener('click', initializeGestureControls);\n        document.getElementById('startVoice').addEventListener('click', initializeVoiceControls);\n\n        /* Keyboard control as in both files */\n        document.addEventListener('keydown', function (e) {\n            if (!gameRunning) return;\n\n            if (e.key === 'ArrowLeft' && snake.dx === 0) {\n                snake.dx = -grid;\n                snake.dy = 0;\n            } else if (e.key === 'ArrowUp' && snake.dy === 0) {\n                snake.dy = -grid;\n                snake.dx = 0;\n            } else if (e.key === 'ArrowRight' && snake.dx === 0) {\n                snake.dx = grid;\n                snake.dy = 0;\n            } else if (e.key === 'ArrowDown' && snake.dy === 0) {\n                snake.dy = grid;\n                snake.dx = 0;\n            }\n        });\n\n        // Start Game\n        resetGame();\n        requestAnimationFrame(loop);",
      "status": "[16]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "32963 <br>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}
